version: '3.6'

x-build-args: &build_args
  INSTALL_PYTHON_VERSION: 3.8
  INSTALL_NODE_VERSION: 12

x-default-volumes: &default_volumes
  volumes:
    - ./:/app
    - node-modules:/app/node_modules
    - ./dev.db:/tmp/db

services:
  flask-dev:
    build:
      context: .
      target: development
      args:
        <<: *build_args
    image: 'tambola-development'
    ports:
      - '5000:5000'
      - '2992:2992'
    depends_on:
      - db
    networks:
      service_network:
    <<: *default_volumes

  flask-prod:
    build:
      context: .
      target: production
      args:
        <<: *build_args
    image: 'tambola-production'
    expose:
      - 5000
    environment:
      FLASK_ENV: production
      FLASK_DEBUG: 0
      LOG_LEVEL: info
      GUNICORN_WORKERS: 4
      HTTP_PORT: 5000
      VIRTUAL_HOST: tambola.sidhart.dev
      LETSENCRYPT_HOST: tambola.sidhart.dev
      LETSENCRYPT_EMAIL: 'tambola@sidhart.dev'
    networks:
      service_network:
    depends_on:
      - nginx-proxy-letsencrypt
      - db
    <<: *default_volumes

  manage:
    build:
      context: .
      target: manage
    environment:
      FLASK_ENV: production
      FLASK_DEBUG: 0
    image: 'tambola-manage'
    stdin_open: true
    tty: true
    depends_on:
      - db
    networks:
      service_network:
    <<: *default_volumes

  db:
    image: postgres:12-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=tambola
      - POSTGRES_PASSWORD=tambola
      - POSTGRES_DB=tambola
    networks:
      service_network:

  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - 80:80
      - 443:443
    container_name: nginx-proxy
    networks:
      service_network:
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx-certs:/etc/nginx/certs
      - nginx-vhost:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html

  nginx-proxy-letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    environment:
      NGINX_PROXY_CONTAINER: 'nginx-proxy'
    networks:
      service_network:
    depends_on:
      - nginx-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx-certs:/etc/nginx/certs
      - nginx-vhost:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html

networks:
  service_network:

volumes:
  nginx-certs:
  nginx-vhost:
  nginx-html:
  postgres_data:
  node-modules:
  static-build:
  dev-db:
